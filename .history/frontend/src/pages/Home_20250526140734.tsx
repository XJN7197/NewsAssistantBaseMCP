import { useState, useEffect, useCallback } from 'react';
import { Input, Button, List as AntList, Typography, Modal, message, Spin, Row, Col, DatePicker } from 'antd';
import type { RangePickerProps } from 'antd/es/date-picker';
import dayjs from 'dayjs';
import 'antd/dist/reset.css'; // 导入 Ant Design 样式
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import styles from './Home.module.css'
import { mockNewsData } from '../mock/newsData'
import { mockReportData } from '../mock/reportData'
import { SettingOutlined, HistoryOutlined } from '@ant-design/icons'; // 导入设置图标
import { FixedSizeList as List } from 'react-window'; // 导入 FixedSizeList 并重命名为 List

// 导入新创建的组件
import NewsSearch from '../components/NewsSearch';
import NewsList from '../components/NewsList';
import ReportModal from '../components/ReportModal';
import SettingsModal from '../components/SettingsModal';
import EmailModal from '../components/EmailModal';

const { Title, Text, Link } = Typography;

const Home: React.FC = () => {
  // 搜索关键词
  const [keyword, setKeyword] = useState('')
  // 新闻列表
  const [newsList, setNewsList] = useState<any[]>([])
  // 选中的新闻项
  const [selectedNews, setSelectedNews] = useState<Set<number>>(new Set());
  // 是否正在加载
  const [loading, setLoading] = useState(false)
  // 分析报告内容
  const [report, setReport] = useState<string | null>(null)
  // 控制报告弹窗显示
  const [showReport, setShowReport] = useState(false)
  // 控制设置弹窗显示
  const [showSettings, setShowSettings] = useState(false);
  // 配置数据
  const [config, setConfig] = useState<any>({});
  // 配置表单实例
  // const [configForm] = Form.useForm(); // 移动到 SettingsModal
  // 配置加载状态
  const [configLoading, setConfigLoading] = useState(false);
  // 在现有的状态声明下添加
  const [emailModalVisible, setEmailModalVisible] = useState(false);
  // const [emailTo, setEmailTo] = useState(''); // 移动到 EmailModal
  // const [emailSending, setEmailSending] = useState(false); // 移动到 EmailModal
  const [showHistory, setShowHistory] = useState(false);
  const [historyReports, setHistoryReports] = useState<any[]>([]);
  const [selectedReport, setSelectedReport] = useState<any>(null);
  // 新增状态：历史报告搜索关键词和日期范围
  const [historySearchKeyword, setHistorySearchKeyword] = useState('');
  const [dateRange, setDateRange] = useState<[dayjs.Dayjs | null, dayjs.Dayjs | null]>([null, null]);
  // 新增分页相关状态
  const [currentPage, setCurrentPage] = useState(1);
  const [totalReports, setTotalReports] = useState(0);
  const [hasMore, setHasMore] = useState(true);
  const [loadingMore, setLoadingMore] = useState(false);
  const PAGE_SIZE = 10;
  
  // 下载报告处理函数
  const handleDownload = useCallback(async () => {
    if (!report) return;

    // const timestamp = new Date().toISOString().replace(/[:.]/g, '-'); // Filename will be generated by backend
    // const fileName = `舆情分析报告_${timestamp}.md`; // Filename will be generated by backend

    try {
      const response = await fetch('http://localhost:8000/save_report', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          content: report,
          // filename: fileName // Filename will be generated by backend
          keyword: keyword // Add keyword to the request body
        }),
      });

      const data = await response.json();
      if (data.status === 'success') {
        console.log("报告保存成功:", data);
        // 先关闭舆情分析报告弹窗
        setShowReport(false);

        // 使用setTimeout确保在Modal关闭后再显示成功弹窗
        setTimeout(() => {
          message.success({
            content: `报告已保存到指定目录：${data.filename}`, // Use filename from backend response
            duration: 3, // 显示3秒
            style: {
              position: 'absolute',
              top: '50%',
              left: '50%',
              transform: 'translate(-50%, -50%)',
              zIndex: 1500, // 确保在其他组件之上
            }, // 调整位置
          });
        }, 300); // 给Modal关闭动画足够的时间
      } else {
        console.error("保存报告失败:", data);
        Modal.error({
          title: '保存失败',
          content: data.message,
          zIndex: 1500,
        });
      }
    } catch (error) {
      console.error('保存报告失败:', error);
      Modal.error({
        title: '保存失败',
        content: String(error),
        zIndex: 1500,
      });
    }
  }, [report, keyword]); // Add keyword as dependency

  // 搜索新闻
  const handleSearch = useCallback(async () => {
    setLoading(true)
    setNewsList([]); // 清空旧的新闻列表
    setReport(null); // 清空旧的报告
    setShowReport(false); // 关闭报告弹窗

    try {
      let data;

      // 根据环境变量决定是否使用mock数据
      if (import.meta.env.VITE_USE_MOCK_NEWS === 'true') {
        // 使用mock数据
        await new Promise(resolve => setTimeout(resolve, 1000)); // 模拟延迟
        data = mockNewsData;
      } else {
        // 使用实际API
        const response = await fetch('http://localhost:8000/search', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ keyword: keyword }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        data = await response.json();
      }

      // 检查返回的数据结构，确保有 news_list 字段
      if (data && data.news_list) {
        // console.log("获取到的新闻数据:", data.news_list);
        // 初始化选中状态，默认全部选中
        const initialNewsList = data.news_list.map((news: any, index: number) => ({ ...news, id: index })); // selected 属性由 selectedNews Set 管理
        setNewsList(initialNewsList);
        const initialSelected = new Set<number>(initialNewsList.map((news: any) => news.id));
        setSelectedNews(initialSelected);
      } else {
        setNewsList([{ error: '未获取到新闻数据或数据格式不正确' }]);
      }

    } catch (error) {
      console.error("搜索新闻失败:", error);
      setNewsList([{ error: `搜索新闻失败: ${error}` }]);
    } finally {
      setLoading(false);
    }
  }, [keyword]); // 添加 keyword 作为依赖

  // 分析新闻
  const handleAnalyze = useCallback(async () => {
    setLoading(true);
    setReport(null); // 清空旧的报告
    setShowReport(true); // Show modal immediately

    // 过滤出选中的新闻
    const newsToAnalyze = newsList.filter(news => selectedNews.has(news.id));

    if (newsToAnalyze.length === 0) {
        setReport("没有新闻内容可供分析。");
        setLoading(false);
        return;
    }

    try {
      let data;

      // 根据环境变量决定是否使用mock数据
      if (import.meta.env.VITE_USE_MOCK_REPORT === 'true') {
        // 使用mock数据
        await new Promise(resolve => setTimeout(resolve, 1000)); // 模拟延迟
        data = mockReportData;
      } else {
        // 使用实际API
        const response = await fetch('http://localhost:8000/analyze', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ news_list: newsToAnalyze }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        data = await response.json();
      }

      // 检查返回的数据结构，确保有 report 字段
      if (data && data.report) {
        // console.log("获取到的分析报告:", data.report);
        setReport(data.report);
      } else {
        setReport("未获取到分析报告或报告格式不正确");
      }

    } catch (error) {
      console.error("分析新闻失败:", error);
      setReport(`分析新闻失败: ${error}`);
    } finally {
      setLoading(false);
    }
  }, [newsList, selectedNews]); // 添加 newsList 和 selectedNews 作为依赖

  // 获取配置
  const fetchConfig = useCallback(async () => {
    setConfigLoading(true);
    try {
      const response = await fetch('http://localhost:8000/config');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      if (data && data.config) {
        setConfig(data.config);
        // configForm.setFieldsValue(data.config); // 移动到 SettingsModal
      } else if (data && data.error) {
        message.error(`获取配置失败: ${data.error}`);
      } else {
        message.error('获取配置失败: 未知错误');
      }
    } catch (error) {
      console.error("获取配置失败:", error);
      message.error(`获取配置失败: ${error}`);
    } finally {
      setConfigLoading(false);
    }
  }, []); // 无依赖

  // 更新配置
  const updateConfig = useCallback(async (values: any) => {
    setConfigLoading(true);
    try {
      const response = await fetch('http://localhost:8000/config', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ config: values }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      if (data && data.status === '✅ .env 文件已更新') {
        message.success('配置更新成功！');
        setConfig(data.config); // 更新本地配置状态
        setShowSettings(false); // 关闭弹窗
      } else if (data && data.error) {
        message.error(`更新配置失败: ${data.error}`);
      } else {
        message.error('更新配置失败: 未知错误');
      }

    } catch (error) {
      console.error("更新配置失败:", error);
      message.error(`更新配置失败: ${error}`);
    } finally {
      setConfigLoading(false);
    }
  }, []); // 无依赖

  // 处理设置按钮点击
  const handleSettingsClick = () => {
    setShowSettings(true);
    // fetchConfig(); // 移动到 SettingsModal 的 useEffect 中
  };

  // 添加获取历史报告列表函数，支持搜索关键词
  const fetchHistoryReports = useCallback(async (keyword?: string, page: number = 1, append: boolean = false, dates?: [dayjs.Dayjs | null, dayjs.Dayjs | null]) => {
    if (page === 1) {
      setLoading(true);
    } else {
      setLoadingMore(true);
    }
    
    try {
      // 构建请求URL，包含关键词和分页参数
      let url = `http://localhost:8000/reports?page=${page}&page_size=${PAGE_SIZE}`;
      if (keyword) {
        url += `&keyword=${encodeURIComponent(keyword)}`;
      }
      if (dates && dates[0] && dates[1]) {
        url += `&start_date=${dates[0].format('YYYY-MM-DD')}&end_date=${dates[1].format('YYYY-MM-DD')}`;
      }
      
      const response = await fetch(url);
      const data = await response.json();
      
      if (data.reports) {
        if (append) {
          // 追加新数据到现有列表
          setHistoryReports(prev => [...prev, ...data.reports]);
        } else {
          // 替换现有列表
          setHistoryReports(data.reports);
        }
        
        // 更新分页信息
        setTotalReports(data.total);
        setCurrentPage(data.page);
        setHasMore(data.reports.length > 0 && data.reports.length + (page - 1) * PAGE_SIZE < data.total);
      } else if (data.message) {
        message.error(`获取历史报告失败: ${data.message}`);
      }
    } catch (error) {
      console.error("获取历史报告失败:", error);
      message.error(`获取历史报告失败: ${error}`);
    } finally {
      if (page === 1) {
        setLoading(false);
      } else {
        setLoadingMore(false);
      }
    }
  }, []); // 无依赖

  // 添加滚动加载更多的处理函数
  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {
    const { scrollTop, scrollHeight, clientHeight } = event.currentTarget;
    // 当滚动到距离底部100px时，加载更多数据
    if (scrollHeight - scrollTop - clientHeight < 100 && hasMore && !loadingMore && !loading) {
      fetchHistoryReports(historySearchKeyword, currentPage + 1, true);
    }
  }, [historySearchKeyword, currentPage, hasMore, loadingMore, loading, fetchHistoryReports]);

  // 添加查看历史报告内容函数
  const viewHistoryReport = useCallback(async (filename: string) => {
    setLoading(true);
    try {
      const response = await fetch(`http://localhost:8000/reports/${filename}`);
      const data = await response.json();
      if (data.content) {
        setReport(data.content);
        setSelectedReport({
          filename: data.filename
        });
        setShowReport(true);
        setShowHistory(false);
      } else if (data.message) {
        message.error(`获取报告内容失败: ${data.message}`);
      } else {
        message.error('获取报告内容失败: 未知错误');
      }
    } catch (error) {
      console.error("获取报告内容失败:", error);
      message.error(`获取报告内容失败: ${error}`);
    } finally {
      setLoading(false);
    }
  }, []); // 无依赖

  // 处理新闻选中状态变化
  const handleNewsItemChange = useCallback((id: number, checked: boolean) => {
    setSelectedNews(prevSelected => {
      const newSelected = new Set(prevSelected);
      if (checked) {
        newSelected.add(id);
      } else {
        newSelected.delete(id);
      }
      return newSelected;
    });
  }, []); // 无依赖

  // 定义虚拟列表的行组件
  const HistoryReportRow = useCallback(({ index, style }: { index: number; style: React.CSSProperties }) => {
    const item = historyReports[index];
    if (!item) return null; // Handle potential undefined item

    return (
      <div style={style} key={item.filename}>
        <AntList.Item
          style={{ background: '#fff', borderRadius: '12px', marginBottom: '16px', padding: '20px', boxShadow: '0 2px 12px 0 rgba(0,0,0,0.05)' }} // Apply existing styles
        >
          <Row gutter={16} style={{ width: '100%' }}> {/* 使用 Row 包裹内容 */}
            <Col span={18}> {/* 左侧列，占 18 份 */}
              <AntList.Item.Meta // 使用 AntList.Item.Meta
                title={<Title level={5} style={{ margin: 0, fontSize: '1.3rem', fontWeight: 600, color: '#1d1d1f' }}>{item.filename}</Title>}
                description={
                  <div>
                    <Text type="secondary" style={{ fontSize: '1rem', display: 'block', marginBottom: '8px' }}>
                      创建时间: {item.created_at}
                    </Text>
                    <Text type="secondary" style={{ fontSize: '1rem', lineHeight: 1.6, display: '-webkit-box', WebkitLineClamp: 2, WebkitBoxOrient: 'vertical', overflow: 'hidden', textOverflow: 'ellipsis' }}>
                      {item.summary}
                    </Text>
                  </div>
                }
              />
            </Col>
            <Col span={6} style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'flex-end' }}> {/* 右侧列，占 6 份，按钮垂直居中并靠右 */}
              <Button type="link" onClick={() => viewHistoryReport(item.filename)}>查看报告</Button>
              <Button
                type="link"
                onClick={() => {
                  viewHistoryReport(item.filename).then(() => {
                    setEmailModalVisible(true);
                  });
                }}
              >
                发送邮件
              </Button>
            </Col>
          </Row>
        </AntList.Item>
      </div>
    );
  }, [historyReports, viewHistoryReport, setEmailModalVisible]); // Add dependencies

  return (
    <div className={styles['home-container']}>
      {/* 搜索栏 */}
      <div className={styles['search-bar']}>
        <NewsSearch
          keyword={keyword}
          setKeyword={setKeyword}
          handleSearch={handleSearch}
          loading={loading}
        />
        {/* 历史记录按钮 */}
        <Button
          icon={<HistoryOutlined />}
          onClick={() => {
            setShowHistory(true);
            fetchHistoryReports();
          }}
          style={{ width:'50px',borderRadius: '16px', padding: '14px', fontSize: '1.1rem', fontWeight: 500, marginLeft: '14px' }} // 保持原有部分样式
        >
        </Button>
        {/* 设置按钮 */}
        <Button
          icon={<SettingOutlined />}
          onClick={handleSettingsClick}
          style={{ width:'50px',borderRadius: '16px', padding: '14px', fontSize: '1.1rem', fontWeight: 500 }} // 保持原有部分样式
        />
      </div>

      {/* 历史记录弹窗 */}
      <Modal
        title={<Title level={3} style={{ textAlign: 'center', marginBottom: 0 }}>历史分析报告</Title>}
        open={showHistory}
        onCancel={() => setShowHistory(false)}
        footer={[
          <Button key="close" type="primary" onClick={() => setShowHistory(false)} style={{ borderRadius: '12px' }}>
            关闭
          </Button>
        ]}
        width="60vw"
        styles={{ body: { maxHeight: '70vh', overflowY: 'auto', background: '#fff', padding: '24px 40px' } }} // 调整 padding 以容纳搜索框
      >
        {/* 新增搜索输入框 */}
        <div style={{ marginBottom: '20px' }}>
          <Input.Search
            placeholder="输入关键词搜索报告"
            allowClear
            enterButton="搜索"
            size="large"
            value={historySearchKeyword}
            onChange={(e) => setHistorySearchKeyword(e.target.value)}
            onSearch={(value) => {
              setCurrentPage(1);
              setHistoryReports([]);
              fetchHistoryReports(value, 1, false);
            }}
          />
        </div>
        <div 
          style={{ overflowY: 'auto', maxHeight: '60vh' }}
          onScroll={handleScroll}
        >
          {loading && currentPage === 1 ? (
            <div style={{ textAlign: 'center', padding: '40px 0' }}>
              <Spin size="large" tip="加载历史报告中..." />
            </div>
          ) : historyReports.length > 0 ? (
            <AntList
              dataSource={historyReports}
              renderItem={(item) => (
                <AntList.Item
                  style={{ background: '#fff', borderRadius: '12px', marginBottom: '16px', padding: '20px', boxShadow: '0 2px 12px 0 rgba(0,0,0,0.05)' }}
                >
                  <Row gutter={16} style={{ width: '100%' }}>
                    <Col span={18}>
                      <AntList.Item.Meta
                        title={<Title level={5} style={{ margin: 0, fontSize: '1.3rem', fontWeight: 600, color: '#1d1d1f' }}>{item.filename}</Title>}
                        description={
                          <div>
                            <Text type="secondary" style={{ fontSize: '1rem', display: 'block', marginBottom: '8px' }}>
                              创建时间: {item.created_at}
                            </Text>
                            <Text type="secondary" style={{ fontSize: '1rem', lineHeight: 1.6, display: '-webkit-box', WebkitLineClamp: 2, WebkitBoxOrient: 'vertical', overflow: 'hidden', textOverflow: 'ellipsis' }}>
                              {item.summary}
                            </Text>
                          </div>
                        }
                      />
                    </Col>
                    <Col span={6} style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'flex-end' }}>
                      <Button type="link" onClick={() => viewHistoryReport(item.filename)}>查看报告</Button>
                      <Button
                        type="link"
                        onClick={() => {
                          viewHistoryReport(item.filename).then(() => {
                            setEmailModalVisible(true);
                          });
                        }}
                      >
                        发送邮件
                      </Button>
                    </Col>
                  </Row>
                </AntList.Item>
              )}
            />
          ) : (historySearchKeyword && !loading ? (
            <div style={{ textAlign: 'center', color: '#6c757d', fontSize: '1.1rem', padding: '40px 0' }}>未找到包含关键词 "{historySearchKeyword}" 的报告</div>
          ) : (
            <div style={{ textAlign: 'center', color: '#6c757d', fontSize: '1.1rem', padding: '40px 0' }}>暂无历史报告</div>
          ))}
          
          {loadingMore && (
            <div style={{ textAlign: 'center', padding: '20px 0' }}>
              <Spin size="small" tip="加载更多..." />
            </div>
          )}
          
          {!hasMore && historyReports.length > 0 && (
            <div style={{ textAlign: 'center', color: '#6c757d', padding: '20px 0' }}>
              已加载全部报告
            </div>
          )}
        </div>
      </Modal>

      {/* 新闻列表 */}
      <NewsList
        newsList={newsList}
        selectedNews={selectedNews}
        onItemChange={handleNewsItemChange}
        loading={loading}
      />

      {/* 一键分析按钮 */}
      {newsList.length > 0 && !newsList[0].error && ( // 仅在有新闻且无错误时显示
        <div className={styles['analyze-btn']}> {/* 使用 Home.module.css 中的样式 */}
          <Button
            type="primary"
            onClick={handleAnalyze}
            loading={loading}
            disabled={selectedNews.size === 0}
            style={{ borderRadius: '16px', padding: '16px 48px', fontSize: '1.2rem', fontWeight: 600, background: 'linear-gradient(90deg, #34e89e 0%, #0f3443 100%)' }} // 保持原有部分样式
          >
            一键舆情分析
          </Button>
        </div>
      )}

      {/* 分析报告弹窗 */}
      <ReportModal
        showReport={showReport}
        setShowReport={setShowReport}
        report={report}
        loading={loading}
        handleDownload={handleDownload}
        setEmailModalVisible={setEmailModalVisible}
      />

      {/* 邮件发送弹窗 */}
      <EmailModal
        emailModalVisible={emailModalVisible}
        setEmailModalVisible={setEmailModalVisible}
        report={report}
      />

      {/* 设置弹窗 */}
      <SettingsModal
        showSettings={showSettings}
        setShowSettings={setShowSettings}
        config={config}
        configLoading={configLoading}
        fetchConfig={fetchConfig}
        updateConfig={updateConfig}
      />
    </div>
  );
};

export default Home;


